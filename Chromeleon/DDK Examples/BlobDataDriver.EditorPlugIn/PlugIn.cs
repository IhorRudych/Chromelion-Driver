using Dionex.Chromeleon.DDK.V2.Driver;
using Dionex.Chromeleon.DDK.V2.InstrumentMethodEditor;
using Dionex.Chromeleon.DDK.V2.InstrumentMethodEditor.DataBlocks;
using Dionex.Chromeleon.DDK.V2.InstrumentMethodEditor.Extensions;

namespace Dionex.DDK.V2.BlobDataDriver.EditorPlugIn
{

    /// <summary>
    /// DDK V2 editor plug-in example showing how to deal with embedded binary data blocks.
    /// Data blocks can be used in order to store data in the Chromeleon instrument method
    /// which cannot be seen or changed by the user. Example: Waters Acquity and Agilent ICF support
    /// in Chromeleon uses this approach. Both editor plug-ins for these system drivers use data blocks 
    /// for storing the data generated by the components provided by Agilent and Waters.
    /// </summary>
    [DriverIDAttribute("MyCompany.BlobDataDriver")]
    public class PlugIn : IInitEditorPlugIn, ISupportPlugInInfo
    {

        #region IInitEditorPlugIn Members
        /// <seealso cref="IInitEditorPlugIn.Initialize"/>
        public void Initialize(IEditorPlugIn plugIn)
        {
            // Create an ID for the embedded binary data blocks
            var dataBlockId = new PlugInDataBlockId(plugIn.DriverID, plugIn.Symbol.Name, "MyBlobDataType");

            //Create new device model.
            var ddkDeviceModel = plugIn.DeviceModels.Add(plugIn.Symbol, DeviceIcon.LcSystem);

            var myDeviceModel = new DataBlockDeviceModel(ddkDeviceModel, dataBlockId);

            // Create a new page control.
            var plugInPage = new DataBlockPage(myDeviceModel);

            // Create a new DDK page object
            IPage ddkPage = ddkDeviceModel.CreatePage(plugInPage, "Settings stored in an embedded data block", plugIn.Symbol);

            // Add page to Wizard page collection.
            ddkDeviceModel.WizardPages.Add(ddkPage, WizardPageOrder.LCSystemPages);

            // Create a new view and add the page to view's tab control.
            IEditorDeviceView editorView = ddkDeviceModel.EditorDeviceViews.Add(EditorViewOrder.LCSystemViews);
            editorView.Pages.Add(ddkPage);
        }

        #endregion

        #region ISupportPlugInInfo Members
        /// <summary>
        /// Will be called by method editor in order to get information from the plug-in outside if the editor UI creation process.
        /// </summary>
        /// <param name="editorPlugInInfo"></param>
        public void InitializePlugInInfo(IEditorPlugInInfo editorPlugInInfo)
        {
            editorPlugInInfo.PlugInData.OnProvideFormattedData += OnProvideFormattedData;
        }

        private void OnProvideFormattedData(object sender, ProvideFormattedDataEventArgs e)
        {
            var blockData = new BlockData(e.BinaryData);
            e.SetFormattedData(blockData.CreateFormattedData(true), "Data Block", "Embedded Data for BlobDataDriver");
        }

        #endregion
    }
}
